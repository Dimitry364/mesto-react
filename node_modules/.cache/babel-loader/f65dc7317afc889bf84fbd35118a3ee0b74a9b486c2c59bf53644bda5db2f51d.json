{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._baseUrl = options.baseUrl;\n    this._headers = options.headers;\n  }\n  getInitialData() {\n    return Promise.all([this.getUser(), this.getInitialCards()]);\n  }\n  getUser() {\n    return this._request(this._baseUrl + '/users/me', {\n      method: 'GET',\n      headers: this._headers\n    });\n  }\n  setUser({\n    name,\n    about\n  }) {\n    return this._request(this._baseUrl + '/users/me', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    });\n  }\n  updateAvatar(avatarSrc) {\n    return this._request(this._baseUrl + '/users/me/avatar', {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatarSrc\n      })\n    });\n  }\n  addCard({\n    name,\n    link\n  }) {\n    return this._request(this._baseUrl + '/cards', {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    });\n  }\n  likeCard(id, isLiked) {\n    return this._request(this._baseUrl + '/cards/likes/' + id, {\n      method: isLiked ? 'DELETE' : 'PUT',\n      headers: this._headers\n    });\n  }\n  deleteCard(id) {\n    return this._request(this._baseUrl + '/cards/' + id, {\n      method: 'DELETE',\n      headers: this._headers\n    });\n  }\n  getInitialCards() {\n    return this._request(this._baseUrl + '/cards', {\n      method: 'GET',\n      headers: this._headers\n    });\n  }\n  _request(url, options) {\n    return fetch(url, options).then(this._checkResponse);\n  }\n  _checkResponse(res) {\n    if (res.ok) return res.json();\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-77',\n  headers: {\n    authorization: '1a5c2685-c177-4bf1-8fad-293b36b650f1',\n    'Content-Type': 'application/json'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","options","_baseUrl","baseUrl","_headers","headers","getInitialData","Promise","all","getUser","getInitialCards","_request","method","setUser","name","about","body","JSON","stringify","updateAvatar","avatarSrc","avatar","addCard","link","likeCard","id","isLiked","deleteCard","url","fetch","then","_checkResponse","res","ok","json","reject","status","api","authorization"],"sources":["C:/Users/Dmitry364/Desktop/dev/mesto-react/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\r\n    constructor(options) {\r\n        this._baseUrl = options.baseUrl;\r\n        this._headers = options.headers;\r\n    }\r\n\r\n    getInitialData() {\r\n        return Promise.all([this.getUser(), this.getInitialCards()]);\r\n    }\r\n\r\n    getUser() {\r\n        return this._request(this._baseUrl + '/users/me', {\r\n            method: 'GET',\r\n            headers: this._headers\r\n        });\r\n    }\r\n\r\n    setUser({ name, about }) {\r\n        return this._request(this._baseUrl + '/users/me', {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: name,\r\n                about: about\r\n            })\r\n        });\r\n    }\r\n\r\n    updateAvatar(avatarSrc) {\r\n        return this._request(this._baseUrl + '/users/me/avatar', {\r\n            method: 'PATCH',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                avatar: avatarSrc\r\n            })\r\n        });\r\n    }\r\n\r\n    addCard({ name, link }) {\r\n        return this._request(this._baseUrl + '/cards', {\r\n            method: 'POST',\r\n            headers: this._headers,\r\n            body: JSON.stringify({\r\n                name: name,\r\n                link: link\r\n            })\r\n        });\r\n    }\r\n\r\n    likeCard(id, isLiked) {\r\n        return this._request(this._baseUrl + '/cards/likes/' + id, {\r\n            method: isLiked ? 'DELETE' : 'PUT',\r\n            headers: this._headers\r\n        });\r\n    }\r\n\r\n    deleteCard(id) {\r\n        return this._request(this._baseUrl + '/cards/' + id, {\r\n            method: 'DELETE',\r\n            headers: this._headers\r\n        });\r\n    }\r\n\r\n    getInitialCards() {\r\n        return this._request(this._baseUrl + '/cards', {\r\n            method: 'GET',\r\n            headers: this._headers\r\n        });\r\n    }\r\n\r\n    _request(url, options) {\r\n        return fetch(url, options).then(this._checkResponse)\r\n    }\r\n\r\n    _checkResponse(res) {\r\n        if (res.ok)\r\n            return res.json();\r\n\r\n        return Promise.reject(`Ошибка: ${res.status}`);\r\n    }\r\n}\r\n\r\nconst api = new Api({\r\n    baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-77',\r\n    headers: {\r\n      authorization: '1a5c2685-c177-4bf1-8fad-293b36b650f1',\r\n      'Content-Type': 'application/json'\r\n    }\r\n  })\r\n  \r\n  export default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}